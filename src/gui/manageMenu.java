/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import lib.database;
import lib.formatter;
import models.menu;
import tubes.TUBES;
import static tubes.TUBES.menuList;

/**
 *
 * @author nanda
 */
public class manageMenu extends javax.swing.JFrame {

    PreparedStatement st;
    private mainMenu parent;
    private DefaultTableModel tableMenuModel;

    /**
     * Creates new form manageMenu
     */
    public manageMenu(mainMenu parent) {
        if (!TUBES.akun.getRole().matches("admin")) {
            JOptionPane.showMessageDialog(this, "Akses ditolak. Hanya admin yang dapat mengakses menu ini.", "Error", JOptionPane.ERROR_MESSAGE);
            new mainMenu().setVisible(true);
            dispose();
            return;
        }
        
        initComponents();
        setLocationRelativeTo(null);
        this.parent = parent;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMenu = new javax.swing.JTable();
        btnReturn = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdatePrice = new javax.swing.JButton();
        btnUpdateStock = new javax.swing.JButton();
        btnEditName = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setForeground(new java.awt.Color(153, 204, 255));

        tableMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nama", "Stock", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableMenu);
        if (tableMenu.getColumnModel().getColumnCount() > 0) {
            tableMenu.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        btnReturn.setText("‚Üê");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnAdd.setText("Tambah Menu");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdatePrice.setText("Ubah Harga");
        btnUpdatePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePriceActionPerformed(evt);
            }
        });

        btnUpdateStock.setText("Ubah Stock");
        btnUpdateStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStockActionPerformed(evt);
            }
        });

        btnEditName.setText("Ubah Nama");
        btnEditName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditNameActionPerformed(evt);
            }
        });

        btnDelete.setText("Hapus Menu");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                                .addComponent(btnEditName, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnUpdateStock, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnUpdatePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(15, 15, 15))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnReturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdatePrice)
                    .addComponent(btnUpdateStock)
                    .addComponent(btnEditName)
                    .addComponent(btnDelete))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        this.setVisible(false);
        new mainMenu().setVisible(true);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String nama = JOptionPane.showInputDialog(this, "Masukkan nama menu:");
        if (nama == null || nama.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama menu tidak valid.");
            return;
        }

        try {
            int stock = Integer.parseInt(JOptionPane.showInputDialog(this, "Masukkan stok menu:"));
            int harga = Integer.parseInt(JOptionPane.showInputDialog(this, "Masukkan harga menu:"));

            st = database.getConnection().prepareStatement("INSERT INTO menu (nama, stock, harga) VALUES (?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS);
            st.setString(1, nama);
            st.setInt(2, stock);
            st.setInt(3, harga);

            int rowsAffected = st.executeUpdate();
            if (rowsAffected > 0) {
                ResultSet rs = st.getGeneratedKeys();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    menu newMenu = new menu(id, nama, stock, harga);
                    menuList.put(id, newMenu);
                    init();
                    JOptionPane.showMessageDialog(this, "Menu berhasil ditambahkan.");
                }
                rs.close();
            }
            st.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menambahkan menu.");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdatePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePriceActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang ingin diubah.");
            return;
        }

        int menuId = (int) tableMenuModel.getValueAt(selectedRow, 0);
        menu selectedMenu = menuList.get(menuId);

        try {
            int newPrice = Integer.parseInt(JOptionPane.showInputDialog(this, "Masukkan harga baru:", selectedMenu.getHarga()));
            st = database.getConnection().prepareStatement("UPDATE menu SET harga = ? WHERE id = ?");
            st.setInt(1, newPrice);
            st.setInt(2, menuId);

            int rowsAffected = st.executeUpdate();
            if (rowsAffected > 0) {
                selectedMenu.setHarga(newPrice);
                init();
                JOptionPane.showMessageDialog(this, "Harga menu berhasil diubah.");
            }
            st.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengubah harga.");
        }
    }//GEN-LAST:event_btnUpdatePriceActionPerformed

    private void btnUpdateStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStockActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang ingin diubah.");
            return;
        }

        int menuId = (int) tableMenuModel.getValueAt(selectedRow, 0);
        menu selectedMenu = menuList.get(menuId);

        try {
            int newStock = Integer.parseInt(JOptionPane.showInputDialog(this, "Masukkan stok baru:", selectedMenu.getStock()));
            st = database.getConnection().prepareStatement("UPDATE menu SET stock = ? WHERE id = ?");
            st.setInt(1, newStock);
            st.setInt(2, menuId);

            int rowsAffected = st.executeUpdate();
            if (rowsAffected > 0) {
                selectedMenu.setStock(newStock);
                init();
                JOptionPane.showMessageDialog(this, "Stok menu berhasil diubah.");
            }
            st.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengubah stok.");
        }
    }//GEN-LAST:event_btnUpdateStockActionPerformed

    private void btnEditNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditNameActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang ingin diubah.");
            return;
        }

        int menuId = (int) tableMenuModel.getValueAt(selectedRow, 0);
        menu selectedMenu = menuList.get(menuId);

        try {
            String newName = JOptionPane.showInputDialog(this, "Masukkan nama baru:", selectedMenu.getNama());
            if (newName == null || newName.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nama tidak valid.");
                return;
            }

            st = database.getConnection().prepareStatement("UPDATE menu SET nama = ? WHERE id = ?");
            st.setString(1, newName);
            st.setInt(2, menuId);

            int rowsAffected = st.executeUpdate();
            if (rowsAffected > 0) {
                selectedMenu.setNama(newName);
                init();
                JOptionPane.showMessageDialog(this, "Nama menu berhasil diubah.");
            }
            st.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengubah nama.");
        }
    }//GEN-LAST:event_btnEditNameActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang ingin dihapus.");
            return;
        }

        int menuId = (int) tableMenuModel.getValueAt(selectedRow, 0);

        try {
            st = database.getConnection().prepareStatement("DELETE FROM menu WHERE id = ?");
            st.setInt(1, menuId);

            int rowsAffected = st.executeUpdate();
            if (rowsAffected > 0) {
                menuList.remove(menuId);
                init();
                JOptionPane.showMessageDialog(this, "Menu berhasil dihapus.");
            }
            st.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus menu.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEditName;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnUpdatePrice;
    private javax.swing.JButton btnUpdateStock;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMenu;
    // End of variables declaration//GEN-END:variables

    public void init() {
        tableMenuModel = (DefaultTableModel) tableMenu.getModel();
        tableMenuModel.setRowCount(0);

        try {
            for (menu Menu : menuList.values()) {
                tableMenuModel.addRow(new Object[]{
                    Menu.getId(),
                    Menu.getNama(),
                    Menu.getStock(),
                    formatter.currency(Menu.getHarga())
                });
            }

            for (int i = 0; i < tableMenu.getColumnCount(); i++) {
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
                tableMenu.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        updateOrderTable();
    }
}
