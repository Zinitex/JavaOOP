/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.*;
import lib.database;
import models.detailMenu;
import models.menu;
import javax.swing.table.DefaultTableCellRenderer;
import lib.formatter;
import tubes.TUBES;
import static tubes.TUBES.akun;
import static tubes.TUBES.orderList;

/**
 *
 * @author nanda
 */
public class orderForm extends javax.swing.JFrame {

    PreparedStatement st, st2;
    private mainMenu parent;

    private DefaultTableModel tableMenuModel, tableOrderModel;
    private ArrayList<menu> menuList = new ArrayList<>();

    /**
     * Creates new form oderForm
     */
    public orderForm(mainMenu parent) {
        initComponents();
        setLocationRelativeTo(null);
        this.parent = parent;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnReturn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        testPanel = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tableMenu = new javax.swing.JTable();
        btnAddItem = new javax.swing.JButton();
        btnAddItems = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        btnDeleteItem = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();
        txtTotal = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnConfirm = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel4.setBackground(new java.awt.Color(153, 204, 255));

        btnReturn.setText("←");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );

        jPanel3.setBackground(new java.awt.Color(102, 255, 51));

        testPanel.setBackground(new java.awt.Color(153, 204, 255));

        tableMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "Stock", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll.setViewportView(tableMenu);
        if (tableMenu.getColumnModel().getColumnCount() > 0) {
            tableMenu.getColumnModel().getColumn(1).setMaxWidth(75);
        }

        btnAddItem.setText("Tambah");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnAddItems.setText("Tambah Beberapa..");
        btnAddItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testPanelLayout = new javax.swing.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(testPanelLayout.createSequentialGroup()
                        .addComponent(btnAddItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddItems)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddItem)
                    .addComponent(btnAddItems))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        tableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "Jumlah", "Harga", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableOrder);
        if (tableOrder.getColumnModel().getColumnCount() > 0) {
            tableOrder.getColumnModel().getColumn(1).setMinWidth(15);
            tableOrder.getColumnModel().getColumn(1).setPreferredWidth(15);
        }

        btnDeleteItem.setText("Hapus");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnEditItem.setText("Edit");
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });

        txtTotal.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        txtTotal.setForeground(new java.awt.Color(17, 17, 17));
        txtTotal.setText("Total : %s");

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEditItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtTotal)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditItem)
                    .addComponent(btnDeleteItem)
                    .addComponent(btnReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(testPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(153, 204, 255));

        btnConfirm.setText("Konfirmasi Order");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(716, Short.MAX_VALUE)
                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(btnConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }

        menu data = menuList.get(selectedRow);
        updateOrderList(data, 1);
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        int selectedRow = tableOrder.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }

        orderList.remove(selectedRow);
        updateOrderTable();
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnAddItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemsActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }

        String quantityText = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin dimasukkan:");
        if (quantityText != null && !quantityText.isEmpty()) {
            try {
                int quantityToAdd = Integer.parseInt(quantityText);

                if (quantityToAdd <= 0) {
                    JOptionPane.showMessageDialog(this, "Angka tidak valid.");
                    return;
                }

                menu data = menuList.get(selectedRow);
                updateOrderList(data, quantityToAdd);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Angka tidak valid.");
            }
        }
    }//GEN-LAST:event_btnAddItemsActionPerformed

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
        int selectedRow = tableOrder.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }

        detailMenu data = orderList.get(selectedRow);

        String quantityText = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin dimasukkan:", data.getQuantity());
        if (quantityText != null && !quantityText.isEmpty()) {
            try {
                int newQuantity = Integer.parseInt(quantityText);
                if (newQuantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Angka tidak valid.");
                    return;
                }

                if (newQuantity > data.getMenu().getStock()) {
                    JOptionPane.showMessageDialog(this,
                            "Jumlah melebihi stok yang tersedia. Jumlah akan diatur ke stok maksimum (" + data.getMenu().getStock() + ").",
                            "Peringatan Stok",
                            JOptionPane.WARNING_MESSAGE);
                    data.setQuantity(data.getMenu().getStock());
                } else {
                    data.setQuantity(newQuantity);
                }

                data.calculateTotal();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Angka tidak valid.");
            }
        }

        updateOrderTable();
    }//GEN-LAST:event_btnEditItemActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        this.setVisible(false);
        new mainMenu().setVisible(true);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        if (orderList.size() == 0) {
            JOptionPane.showMessageDialog(this, "Daftar menu harus lebih dari 1.");
            return;
        }

        try {
            st = database.getConnection().prepareStatement("INSERT INTO pemesanan (user_id) VALUES (?)",
                    Statement.RETURN_GENERATED_KEYS);
            st.setInt(1, akun.getId());
            
            int rowsAffected = st.executeUpdate();

            if (rowsAffected > 0) {
                ResultSet rs = st.getGeneratedKeys();
                if (rs.next()) {
                    int uid = rs.getInt(1);
                    
                    for (detailMenu detail : orderList) {
                        int itemId = detail.getMenu().getId();
                        int quantity = detail.getQuantity();
                        
                        st2 = database.getConnection().prepareStatement("INSERT INTO detailpemesanan (pemesanan_id, menu_id, jumlah) VALUES (?,?,?)");
                        st2.setInt(1, uid);
                        st2.setInt(2, itemId);
                        st2.setInt(3, quantity);
                        
                        st2.executeUpdate();
                    }
                    
                    st2.close();
                }
                rs.close();
            }

            st.close();
            
            orderList.clear();
            updateOrderTable();
            
            JOptionPane.showMessageDialog(this, "Pesanan terkonfirmasi, status pemesanan dapat dilihat pada menu Riwayat Pesanan.");
            
        } catch (Exception e) {
            e.printStackTrace();
        }

        
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        orderList.clear();
        updateOrderTable();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddItems;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnReturn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tableMenu;
    private javax.swing.JTable tableOrder;
    private javax.swing.JPanel testPanel;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables

    private void updateOrderList(menu data, int quantityToAdd) {
        detailMenu existData = null;
        for (detailMenu detail : orderList) {
            if (detail.getMenu().getNama().equals(data.getNama())) {
                existData = detail;
                break;
            }
        }

        if (existData == null) {
            if (quantityToAdd > data.getStock()) {
                JOptionPane.showMessageDialog(null,
                        "Jumlah melebihi stok yang tersedia. Jumlah akan diatur ke stok maksimum (" + data.getStock() + ").",
                        "Peringatan Stok",
                        JOptionPane.WARNING_MESSAGE);
                quantityToAdd = data.getStock();
            }

            detailMenu detail = new detailMenu(data, quantityToAdd);
            orderList.add(detail);
        } else {
            int totalQuantity = existData.getQuantity() + quantityToAdd;

            if (totalQuantity > data.getStock()) {
                JOptionPane.showMessageDialog(null,
                        "Jumlah melebihi stok yang tersedia. Jumlah akan diatur ke stok maksimum (" + data.getStock() + ").",
                        "Peringatan Stok",
                        JOptionPane.WARNING_MESSAGE);
                existData.setQuantity(data.getStock());
            } else {
                existData.setQuantity(totalQuantity);
            }

            existData.calculateTotal();
        }

        updateOrderTable();
    }

    public void updateOrderTable() {
        tableOrderModel = (DefaultTableModel) tableOrder.getModel();
        tableOrderModel.setRowCount(0);

        int total = 0;
        for (detailMenu detail : orderList) {
            Object[] rowData = {
                detail.getMenu().getNama(),
                detail.getQuantity(),
                formatter.currency(detail.getMenu().getHarga()),
                formatter.currency(detail.getTotal())
            };
            tableOrderModel.addRow(rowData);
            total += detail.getTotal();
        }

        for (int i = 0; i < tableOrder.getColumnCount(); i++) {
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
            tableOrder.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        txtTotal.setText(String.format("Total : %s", formatter.currency(total)));
    }

    public void init() {
        tableMenuModel = (DefaultTableModel) tableMenu.getModel();

        try {
            PreparedStatement st = database.getConnection().prepareStatement(
                    "SELECT * from menu");
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                menu Menu = new menu(rs.getInt("id"), rs.getString("nama"), rs.getInt("stock"), rs.getInt("harga"));
                menuList.add(Menu);
            }

            for (menu Menu : menuList) {
                tableMenuModel.addRow(new Object[]{Menu.getNama(), Menu.getStock(), formatter.currency(Menu.getHarga())});
            }

            for (int i = 0; i < tableMenu.getColumnCount(); i++) {
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
                tableMenu.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        updateOrderTable();
    }
}
