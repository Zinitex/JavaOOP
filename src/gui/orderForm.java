/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.*;
import javax.swing.table.*;
import lib.database;
import models.detail_menu;
import models.menu;
import javax.swing.table.DefaultTableCellRenderer;
import lib.formatCurrency;

/**
 *
 * @author nanda
 */
public class orderForm extends javax.swing.JFrame {

    PreparedStatement st;
    private mainMenu parent;

    private DefaultTableModel tableMenuModel, tableOrderModel;

    private Map<String, detail_menu> orderList = new HashMap<>();
    private ArrayList<menu> menuList = new ArrayList<>();

    /**
     * Creates new form oderForm
     */
    public orderForm(mainMenu parent) {
        initComponents();
        setLocationRelativeTo(null);
        this.parent = parent;
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testPanel = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tableMenu = new javax.swing.JTable();
        btnAddItem = new javax.swing.JButton();
        btnAddItems = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        btnDeleteItem = new javax.swing.JButton();
        btnEditItem = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        testPanel.setBackground(new java.awt.Color(153, 204, 255));

        tableMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama", "Deskripsi", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll.setViewportView(tableMenu);
        if (tableMenu.getColumnModel().getColumnCount() > 0) {
            tableMenu.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        btnAddItem.setText("Tambah");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnAddItems.setText("Tambah Beberapa..");
        btnAddItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testPanelLayout = new javax.swing.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(testPanelLayout.createSequentialGroup()
                        .addComponent(btnAddItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddItems)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddItem)
                    .addComponent(btnAddItems))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        tableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "Jumlah", "Harga", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableOrder);
        if (tableOrder.getColumnModel().getColumnCount() > 0) {
            tableOrder.getColumnModel().getColumn(1).setMinWidth(15);
            tableOrder.getColumnModel().getColumn(1).setPreferredWidth(15);
        }

        btnDeleteItem.setText("Hapus");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnEditItem.setText("Edit");
        btnEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnEditItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteItem)
                        .addContainerGap(230, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteItem)
                    .addComponent(btnEditItem))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jButton5.setText("‚Üê");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }

        menu data = menuList.get(selectedRow);
        updateOrderList(data, 1);
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        int selectedRow = tableOrder.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }
        
        String name = (String) tableOrder.getValueAt(selectedRow, 0);
        orderList.remove(name);
        
        updateOrderTable();
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnAddItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemsActionPerformed
        int selectedRow = tableMenu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }

        String quantityText = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin dimasukkan:");
        if (quantityText != null && !quantityText.isEmpty()) {
            try {
                int quantityToAdd = Integer.parseInt(quantityText);

                if (quantityToAdd <= 0) {
                    JOptionPane.showMessageDialog(this, "Angka tidak valid.");
                    return;
                }

                menu data = menuList.get(selectedRow);
                updateOrderList(data, quantityToAdd);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Angka tidak valid.");
            }
        }
    }//GEN-LAST:event_btnAddItemsActionPerformed

    private void btnEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditItemActionPerformed
        int selectedRow = tableOrder.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih menu yang tersedia.");
            return;
        }
        
        String name = (String) tableOrder.getValueAt(selectedRow, 0);
        detail_menu data = orderList.get(name);
        
        String quantityText = JOptionPane.showInputDialog(this, "Masukkan jumlah yang ingin dimasukkan:",data.quantity);
        if (quantityText != null && !quantityText.isEmpty()) {
            try {
                int quantityToAdd = Integer.parseInt(quantityText);
                if(quantityToAdd <= 0 ){
                    JOptionPane.showMessageDialog(this, "Angka tidak valid.");
                    return;
                }
                
                data.quantity = quantityToAdd;
                data.calculateTotal();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Angka tidak valid.");
            }
        }
        
        updateOrderTable();
    }//GEN-LAST:event_btnEditItemActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddItems;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnEditItem;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tableMenu;
    private javax.swing.JTable tableOrder;
    private javax.swing.JPanel testPanel;
    // End of variables declaration//GEN-END:variables

    private void updateOrderList(menu data, int quantityToAdd) {
        detail_menu existData = orderList.get(data.nama);
        if (existData == null) {
            detail_menu detail = new detail_menu(data, quantityToAdd);
            this.orderList.put(data.nama, detail);
        } else {
            existData.quantity += quantityToAdd;
            existData.calculateTotal();
        }

        updateOrderTable();
    }

    public void updateOrderTable() {
        tableOrderModel = (DefaultTableModel) tableOrder.getModel();
        tableOrderModel.setRowCount(0);

        for (Map.Entry<String, detail_menu> entry : orderList.entrySet()) {
            detail_menu detail = entry.getValue();

            Object[] rowData = {detail.Menu.nama, detail.quantity, detail.Menu.harga, new lib.formatCurrency().format(detail.total)};
            tableOrderModel.addRow(rowData);
        }

        // Align center table
        for (int i = 0; i < tableOrder.getColumnCount(); i++) {
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

            tableOrder.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    public void init() {
        tableMenuModel = (DefaultTableModel) tableMenu.getModel();

        try {
            PreparedStatement st = database.getConnection().prepareStatement(
                    "SELECT * from menu");
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                menu Menu = new menu(rs.getInt("id"), rs.getString("nama"), rs.getString("desc"), rs.getInt("harga"));
                menuList.add(Menu);
            }

            for (menu Menu : menuList) {
                tableMenuModel.addRow(new Object[]{Menu.id, Menu.nama, Menu.desc, new formatCurrency().format(Menu.harga)});
            }

            // Align center table
            for (int i = 0; i < tableMenu.getColumnCount(); i++) {
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

                tableMenu.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }

            System.out.println("Connected to the database.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
